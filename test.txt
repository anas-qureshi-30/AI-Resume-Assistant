import google.generativeai as gemini
from docx import Document
from flask import session
import json
def aiQuestionGenerator(jobDescription):
    with open("config.json") as f:
        config=json.load(f)
    file=Document(session["file_path"])
    text=""
    for para in file.paragraphs:
        text=text+para.text
    gemini.configure(api_key=config["GOOGLE_API"])
    model=gemini.GenerativeModel("models/gemini-1.5-flash")
    resposne=model.generate_content("""
    You are a strict output-only model. Your sole purpose is to analyze resumes for interview questions. Do not write introductions, explanations, or comments. Respond ONLY with valid JSON and never include code fences. 
    The user will provide two inputs:
        A resume (candidate’s details).
        A job description (target role).
                                   
    Your task is to analyze both inputs and generate:
                                   
    1. Interview Questions
    At least 10 questions in total.
    Categories:
    Technical (skills, tools, coding, domain knowledge)
    Behavioral (soft skills, teamwork, communication, problem-solving)
    Role-Specific (directly related to the target job description and responsibilities)
    Each question must have a difficulty level: "easy" | "medium" | "hard".

    2. Mock Interview (Q&A)
    At least 5 questions with answers.
    Use the candidate’s resume + job description context to generate realistic answers.
    Answers should reflect a professional, concise, and role-aligned style.
    Output Format (Strictly JSON Only, No Explanations, No Extra Text):
    {
    "interviewQuestions": [
    {
    "category": "<Technical | Behavioral | Role-Specific>",
    "difficulty": "<Easy | Medium | Hard>",
    "question": "<the question text>"
    }
    ],
    "mockInterview": [
    {
    "question": "<the question text>",
    "answer": "<a realistic and professional answer>"
    }
    ]
    }
    Rules:
        Always produce more than 10 interviewQuestions.
        Always produce more than 5 mockInterview Q&A.
        Do not include any explanations outside the JSON.
        Keep answers natural, realistic, and aligned to both resume + job description.
    Job Description"""+jobDescription+" User Resume: "+text)
    cleaned = resposne.text.strip()
    if cleaned.startswith("```json"):
        cleaned = cleaned[len("```json"):].strip()
    if cleaned.endswith("```"):
        cleaned = cleaned[:-3].strip()
    output=json.loads(cleaned)
    return output






    // AI Interview Readiness Report JavaScript

// Global variables
let currentReport = null;
let isGenerating = false;

// Sample job description for demo purposes
const sampleJobDescription = `Senior Software Engineer - Full Stack

We are seeking an experienced Senior Software Engineer to join our growing development team. The ideal candidate will have 5+ years of experience building scalable web applications using modern technologies.

Key Requirements:
• 5+ years of professional software development experience
• Strong proficiency in Python, JavaScript, and React
• Experience with cloud platforms (AWS, Azure, or GCP)
• Knowledge of containerization technologies (Docker, Kubernetes)
• Familiarity with agile methodologies and CI/CD pipelines
• Experience with databases (PostgreSQL, MongoDB)
• Strong problem-solving and communication skills
• Bachelor's degree in Computer Science or related field

Preferred Qualifications:
• Experience with microservices architecture
• Knowledge of machine learning frameworks
• DevOps experience with infrastructure as code
• Experience mentoring junior developers
• Open source contributions

Responsibilities:
• Design and develop scalable web applications
• Collaborate with cross-functional teams in agile environment
• Participate in code reviews and technical discussions
• Mentor junior team members
• Ensure code quality and best practices`;

// Initialize the application
function initializeApp() {
    setupEventListeners();
}

function setupEventListeners() {
    const jobDescTextarea = document.getElementById('job-description');
    const generateBtn = document.getElementById('generate-btn');

    if (jobDescTextarea) {
        jobDescTextarea.addEventListener('input', function () {
            if (this.value.trim().length > 100 && !isGenerating) {
                generateBtn.disabled = false;
                generateBtn.classList.remove('disabled');
            } else if (!isGenerating) {
                generateBtn.disabled = true;
                generateBtn.classList.add('disabled');
            }
        });
    }
}


function loadSampleJD() {
    const jobDescTextarea = document.getElementById('job-description');
    jobDescTextarea.value = sampleJobDescription;

    // Trigger input event to enable generate button
    jobDescTextarea.dispatchEvent(new Event('input'));

    showNotification('Sample job description loaded!', 'success');
}

async function generateReport() {
    if (isGenerating) return;

    const jobDescription = document.getElementById('job-description').value.trim();
    if (jobDescription.length < 50) {
        showNotification('Please provide a more detailed job description (minimum 50 characters)', 'warning');
        return;
    }

    // Set loading state
    setGeneratingState(true);
    try {
        const response = await fetch("/api/aiQuestion",{
            method:"POST",
            headers:{
                "Content-Type":"application/json"
            },
            body:JSON.stringify({"jobDescription":jobDescription})
        })
        const data = await response.json()
        currentReport = data.result;
        console.log(currentReport)
        updateCounters()
        displayInterviewQuestions()
        displayMockQA()
        showNotification('Interview readiness report generated successfully!', 'success');

    } catch (error) {
        console.error('Report generation error:', error);
        showNotification('Failed to generate report. Please try again.', 'error');
    } finally {
        setGeneratingState(false);
    }
}

// Add window-level function for onclick handler
window.generateReport = generateReport;
window.loadSampleJD = loadSampleJD;
// window.downloadReport = downloadReport;
// window.generateNewReport = generateNewReport;
// window.shareReport = shareReport;

function setGeneratingState(generating) {
    isGenerating = generating;
    const generateBtn = document.getElementById('generate-btn');
    const btnText = generateBtn.querySelector('.btn-text');
    const loadingSpinner = generateBtn.querySelector('.loading');

    if (generating) {
        generateBtn.disabled = true;
        btnText.textContent = 'Generating Report...';
        loadingSpinner.style.display = 'inline-block';
        generateBtn.classList.add('loading');
    } else {
        generateBtn.disabled = false;
        btnText.textContent = 'Generate Report';
        loadingSpinner.style.display = 'none';
        generateBtn.classList.remove('loading');
    }
}
function displayInterviewQuestions() {
    const container = document.getElementById('questions-container');
    const questions = currentReport.interviewQuestions;
    container.innerHTML = questions.map(question => `
        <div class="question-item slide-in-up">
            <div class="question-category">${question.category}</div>
            <div class="question-text">${question.question}</div>
            <div class="question-difficulty">Difficulty: ${question.difficulty}</div>
        </div>
    `).join('');
    // Add staggered animation
    const questionItems = container.querySelectorAll('.question-item');
    questionItems.forEach((item, index) => {
        setTimeout(() => {
            item.classList.add('slide-in-up');
        }, index * 100);
    });
}

function displayMockQA() {
    const container = document.getElementById('mock-interview-container');
    const qaSet = currentReport.mockInterview;

    container.innerHTML = qaSet.map(qa => `
        <div class="qa-item slide-in-up">
            <div class="qa-question">
                <strong>Q:</strong> ${qa.question}
            </div>
            <div class="qa-answer">
                <h4>Suggested Answer</h4>
                <p>${qa.answer}</p>
            </div>
        </div>
    `).join('');

    // Add staggered animation
    const qaItems = container.querySelectorAll('.qa-item');
    qaItems.forEach((item, index) => {
        setTimeout(() => {
            item.classList.add('slide-in-up');
        }, index * 150);
    });
}

function updateCounters() {
    document.getElementById('question-count').textContent =
        `${currentReport.interviewQuestions.length} questions`;
    document.getElementById('qa-count').textContent =
        `${currentReport.mockInterview.length} practice sets`;
}

// function downloadReport() {
//     if (!currentReport) {
//         showNotification('No report available to download!', 'error');
//         return;
//     }

//     const reportContent = generateReportContent();
//     const blob = new Blob([reportContent], { type: 'text/plain' });
//     const url = window.URL.createObjectURL(blob);
//     const a = document.createElement('a');
//     a.href = url;
//     a.download = `Interview_Readiness_Report_${new Date().toISOString().split('T')[0]}.txt`;
//     document.body.appendChild(a);
//     a.click();
//     document.body.removeChild(a);
//     window.URL.revokeObjectURL(url);

//     showNotification('Report downloaded successfully!', 'success');
// }

// function generateReportContent() {
//     const report = currentReport;
//     const date = new Date().toLocaleDateString();

//     return `AI INTERVIEW READINESS REPORT
// Generated on: ${date}
// Role: ${report.role}
// Experience Level: ${report.experience}

// KEY TECHNOLOGIES:
// ${report.keywords.join(', ')}

// LIKELY INTERVIEW QUESTIONS (${report.interviewQuestions.length}):
// ${report.interviewQuestions.map((q, i) =>
//         `${i + 1}. [${q.category}] ${q.text} (${q.difficulty})`
//     ).join('\n')}

// MOCK INTERVIEW Q&A (${report.mockQA.length}):
// ${report.mockQA.map((qa, i) =>
//         `${i + 1}. Q: ${qa.question}\n   A: ${qa.answer}\n`
//     ).join('\n')}

// ---
// This report was generated by AI Resume Assistant Interview Prep Tool.
// Use these questions to practice and prepare for your upcoming interviews.
// `;
// }

// function generateNewReport() {
//     // Reset current report
//     currentReport = null;

//     // Hide results section
//     const resultsSection = document.getElementById('results-section');
//     resultsSection.classList.remove('show');

//     setTimeout(() => {
//         resultsSection.style.display = 'none';
//     }, 300);

//     // Clear job description
//     document.getElementById('job-description').value = '';

//     // Scroll to top
//     document.querySelector('.input-section').scrollIntoView({
//         behavior: 'smooth'
//     });

//     showNotification('Ready for new report generation!', 'success');
// }

// function shareReport() {
//     if (!currentReport) {
//         showNotification('No report available to share!', 'error');
//         return;
//     }

//     const shareText = `I just generated my AI Interview Readiness Report! 🎯\n\n${currentReport.interviewQuestions.length} personalized questions for ${currentReport.role} role.\n\nGenerated with AI Resume Assistant`;

//     if (navigator.share) {
//         navigator.share({
//             title: 'My Interview Readiness Report',
//             text: shareText,
//             url: window.location.href
//         });
//     } else {
//         // Fallback - copy to clipboard
//         navigator.clipboard.writeText(shareText).then(() => {
//             showNotification('Report summary copied to clipboard!', 'success');
//         }).catch(() => {
//             showNotification('Unable to share report', 'error');
//         });
//     }
// }

function showNotification(message, type = 'success') {
    const notification = document.getElementById('notification');
    const messageElement = document.getElementById('notification-message');

    messageElement.textContent = message;
    notification.className = `notification ${type} show`;

    setTimeout(() => {
        notification.classList.remove('show');
    }, 4000);
}

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', function () {
    initializeApp();
});












<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Interview Readiness Report</title>
    <link rel="stylesheet" href="{{url_for('static',filename='css/homePage.css')}}">
    <link rel="stylesheet" href="{{url_for('static',filename='css/aiInterview.css')}}">
    <script src="{{url_for('static',filename='js/homePage.js')}}"></script>
    <script src="{{url_for('static',filename='js/aiInterview.js')}}"></script>
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <div class="logo">AI Resume Assistant</div>
            <ul class="nav-links">
                <li><a href="/">Home</a></li>
                <li><a href="#" class="active">Interview Prep</a></li>
                <li><a href="/atsSimulator">ATS Simulator</a></li>
                <li><a href="/generator">Generator</a></li>
            </ul>
        </div>
    </nav>

    <section class="hero">
        <div class="hero-content">
            <h1>AI Interview Readiness Report</h1>
            <p>Get personalized interview questions and practice scenarios based on your target role</p>
        </div>
    </section>

    <main class="main-content">
        <div class="container">
            <!-- Input Section -->
            <div class="input-section">

                <div class="job-description-input">
                    <h2>Target Job Description</h2>
                    <p>Paste the job description to generate tailored interview questions</p>
                    <textarea 
                        id="job-description" 
                        placeholder="Paste the complete job description here...

Example:
We are seeking a Senior Software Engineer with 5+ years of experience in Python, React, and cloud technologies. The candidate will lead development teams and architect scalable solutions..."
                        rows="12"
                    ></textarea>
                    <div class="input-actions">
                        <button class="btn-primary" onclick="generateReport()" id="generate-btn">
                            <span class="btn-text">Generate Report</span>
                            <span class="loading" style="display: none;"></span>
                        </button>
                        <button class="btn-secondary" onclick="loadSampleJD()">Load Sample</button>
                    </div>
                </div>
            </div>

            <!-- Results Section -->
            <div class="results-section" id="results-section" style="display: none;">
                <!-- Interview Questions Section -->
                <div class="report-card" id="interview-questions-section">
                    <div class="card-header">
                        <h2>Likely Interview Questions</h2>
                        <span class="question-count" id="question-count">0 questions</span>
                    </div>
                    <p class="card-description">AI-predicted questions based on your resume and job requirements</p>
                    
                    <div class="questions-container" id="questions-container">
                        <!-- Dynamic questions will be inserted here -->
                    </div>
                </div>

                <!-- Mock Interview Section -->
                <div class="report-card" id="mock-interview-section">
                    <div class="card-header">
                        <h2>Mock Interview Q&A</h2>
                        <span class="qa-count" id="qa-count">0 practice sets</span>
                    </div>
                    <p class="card-description">Practice questions with suggested answers tailored to your profile</p>
                    
                    <div class="mock-interview-container" id="mock-interview-container">
                        <!-- Dynamic Q&A will be inserted here -->
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="action-section">
                    <div class="action-buttons">
                        <button class="btn-primary" onclick="downloadReport()">
                            Download Report
                        </button>
                        <button class="btn-secondary" onclick="generateNewReport()">
                            Generate New Report
                        </button>
                        <button class="btn-outline" onclick="shareReport()">
                            Share Report
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Notification -->
    <div class="notification" id="notification">
        <div id="notification-message"></div>
    </div>


</body>
</html>








/* Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
    --primary: #6366f1;
    --primary-dark: #4f46e5;
    --secondary: #8b5cf6;
    --accent: #06d6a0;
    --warning: #f59e0b;
    --danger: #ef4444;
    --success: #10b981;
    --dark: #0f172a;
    --gray: #64748b;
    --light-gray: #f1f5f9;
    --white: #fff;
    --glass: rgba(255, 255, 255, 0.1);
    --shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
    --shadow-lg: 0 20px 40px -12px rgba(0, 0, 0, 0.15);
    --border-radius: 0.75rem;
    --transition: all 0.3s ease;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
    color: var(--dark);
    background: linear-gradient(135deg, #667eea 0%, #764ba2 25%, #f093fb 50%, #f5576c 75%, #4facfe 100%);
    background-size: 400% 400%;
    animation: gradientShift 15s ease infinite;
    min-height: 100vh;
}

@keyframes gradientShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

/* Navigation */
.navbar {
    position: fixed;
    top: 0;
    width: 100%;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    z-index: 1000;
    padding: 1rem 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    transition: var(--transition);
}

.nav-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.logo {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--primary);
}

.nav-links {
    display: flex;
    list-style: none;
    gap: 2rem;
    align-items: center;
}

.nav-links a {
    text-decoration: none;
    color: var(--dark);
    font-weight: 500;
    transition: var(--transition);
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
}

.nav-links a:hover,
.nav-links a.active {
    color: var(--primary);
    background: rgba(99, 102, 241, 0.1);
}

/* Hero Section */
.hero {
    padding: 8rem 2rem 4rem;
    text-align: center;
    color: white;
    position: relative;
}

.hero-content {
    max-width: 800px;
    margin: 0 auto;
    position: relative;
    z-index: 2;
}

.hero h1 {
    font-size: clamp(2.5rem, 4vw, 3.5rem);
    margin-bottom: 1rem;
    font-weight: 800;
    background: linear-gradient(45deg, #fff, #f0f9ff);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

.hero p {
    font-size: 1.2rem;
    opacity: 0.9;
    max-width: 600px;
    margin: 0 auto;
}

/* Main Content */
.main-content {
    padding: 2rem;
    background: var(--light-gray);
    min-height: 100vh;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
}

/* Input Section */
.input-section {
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
    margin-bottom: 3rem;
}

.job-description-input {
    background: white;
    padding: 2rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
}

.job-description-input h2 {
    color: var(--dark);
    margin-bottom: 0.5rem;
    font-size: 1.5rem;
}

.job-description-input p {
    color: var(--gray);
    margin-bottom: 1.5rem;
}

#job-description {
    width: 100%;
    padding: 1rem;
    border: 2px solid #e5e7eb;
    border-radius: var(--border-radius);
    font-family: inherit;
    font-size: 0.95rem;
    line-height: 1.6;
    resize: vertical;
    transition: var(--transition);
    margin-bottom: 1.5rem;
}

#job-description:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
}

.input-actions {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
}

/* Buttons */
.btn-primary,
.btn-secondary,
.btn-outline {
    padding: 0.75rem 1.5rem;
    border-radius: var(--border-radius);
    font-weight: 600;
    cursor: pointer;
    transition: var(--transition);
    border: none;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

.btn-primary {
    background: var(--primary);
    color: white;
    box-shadow: var(--shadow);
}

.btn-primary:hover {
    background: var(--primary-dark);
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
}

.btn-secondary {
    background: var(--glass);
    color: var(--primary);
    border: 1px solid rgba(99, 102, 241, 0.3);
    backdrop-filter: blur(10px);
}

.btn-secondary:hover {
    background: rgba(99, 102, 241, 0.1);
}

.btn-outline {
    background: transparent;
    color: var(--primary);
    border: 1px solid var(--primary);
}

.btn-outline:hover {
    background: var(--primary);
    color: white;
}

.btn-primary.loading .btn-text {
    opacity: 0.7;
}

.loading {
    width: 16px;
    height: 16px;
    border: 2px solid #f3f3f3;
    border-top: 2px solid var(--primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Results Section */
.results-section {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease, transform 0.6s ease;
}

.results-section.show {
    opacity: 1;
    transform: translateY(0);
}

.report-card {
    background: white;
    padding: 2rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    margin-bottom: 2rem;
    border-left: 4px solid var(--primary);
}

.card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
}

.card-header h2 {
    color: var(--dark);
    font-size: 1.5rem;
}

.question-count,
.qa-count {
    background: var(--primary);
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.8rem;
    font-weight: 600;
}

.card-description {
    color: var(--gray);
    margin-bottom: 2rem;
}

/* Question Items */
.question-item {
    background: var(--light-gray);
    padding: 1.5rem;
    border-radius: var(--border-radius);
    margin-bottom: 1rem;
    border-left: 3px solid var(--accent);
    transition: var(--transition);
}

.question-item:hover {
    background: #e2e8f0;
    transform: translateX(5px);
}

.question-category {
    display: inline-block;
    background: var(--accent);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    margin-bottom: 0.75rem;
}

.question-text {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--dark);
    margin-bottom: 0.5rem;
}

.question-difficulty {
    font-size: 0.8rem;
    color: var(--gray);
}

/* Mock Interview Q&A */
.qa-item {
    background: var(--light-gray);
    padding: 1.5rem;
    border-radius: var(--border-radius);
    margin-bottom: 1.5rem;
    border-left: 3px solid var(--secondary);
}

.qa-question {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--dark);
    margin-bottom: 1rem;
    padding: 1rem;
    background: white;
    border-radius: 0.5rem;
    border-left: 3px solid var(--primary);
}

.qa-answer {
    background: white;
    padding: 1rem;
    border-radius: 0.5rem;
    border-left: 3px solid var(--success);
}

.qa-answer h4 {
    color: var(--success);
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
    text-transform: uppercase;
}

.qa-answer p {
    color: var(--dark);
    line-height: 1.6;
}

/* Action Section */
.action-section {
    text-align: center;
    padding: 2rem;
    background: white;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
}

.action-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
}

/* Notification */
.notification {
    position: fixed;
    top: 100px;
    right: 20px;
    background: white;
    padding: 1rem 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-lg);
    border-left: 4px solid var(--success);
    z-index: 3000;
    transform: translateX(400px);
    transition: transform 0.3s ease;
}

.notification.show {
    transform: translateX(0);
}

.notification.error {
    border-left-color: var(--danger);
}

.notification.warning {
    border-left-color: var(--warning);
}

/* Responsive Design */
@media (max-width: 1024px) {
    .input-section {
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }
    
    .nav-links {
        gap: 1rem;
    }
    
    .nav-links a {
        padding: 0.4rem 0.8rem;
        font-size: 0.9rem;
    }
}

@media (max-width: 768px) {
    .hero {
        padding: 6rem 1rem 3rem;
    }
    
    .main-content {
        padding: 1rem;
    }
    
    .report-card {
        padding: 1.5rem;
    }
    
    .action-buttons {
        flex-direction: column;
        align-items: center;
    }
    
    .action-buttons .btn-primary,
    .action-buttons .btn-secondary,
    .action-buttons .btn-outline {
        width: 100%;
        max-width: 300px;
    }
    
    .nav-links {
        display: none;
    }
    
    .card-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
    }
    
    .question-count,
    .qa-count {
        align-self: flex-start;
    }
}

@media (max-width: 480px) {
    .resume-status {
        padding: 1rem;
    }
    
    .job-description-input {
        padding: 1.5rem;
    }
    
    .input-actions {
        flex-direction: column;
        gap: 0.75rem;
    }
    
    .btn-primary,
    .btn-secondary {
        width: 100%;
        justify-content: center;
    }
}

/* Animations */
@keyframes slideInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.slide-in-up {
    animation: slideInUp 0.6s ease forwards;
}